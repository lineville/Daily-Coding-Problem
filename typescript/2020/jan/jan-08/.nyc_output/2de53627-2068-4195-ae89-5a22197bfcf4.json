{"/mnt/c/Users/Lin01/source/repos/daily-coding-problem/typescript/2020/jan/jan-08/src/BasicTest.ts":{"path":"/mnt/c/Users/Lin01/source/repos/daily-coding-problem/typescript/2020/jan/jan-08/src/BasicTest.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":31},"end":{"line":10,"column":3}},"2":{"start":{"line":6,"column":4},"end":{"line":8,"column":6}},"3":{"start":{"line":7,"column":8},"end":{"line":7,"column":27}},"4":{"start":{"line":9,"column":4},"end":{"line":9,"column":21}},"5":{"start":{"line":11,"column":0},"end":{"line":11,"column":28}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":31},"end":{"line":3,"column":32}},"loc":{"start":{"line":3,"column":43},"end":{"line":10,"column":1}},"line":3},"1":{"name":"BasicTest","decl":{"start":{"line":4,"column":13},"end":{"line":4,"column":22}},"loc":{"start":{"line":4,"column":25},"end":{"line":5,"column":5}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":6,"column":22},"end":{"line":6,"column":23}},"loc":{"start":{"line":6,"column":37},"end":{"line":8,"column":5}},"line":6}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1},"f":{"0":1,"1":0,"2":1},"b":{},"inputSourceMap":{"version":3,"file":"/mnt/c/Users/Lin01/source/repos/daily-coding-problem/typescript/2020/jan/jan-08/src/BasicTest.ts","sources":["/mnt/c/Users/Lin01/source/repos/daily-coding-problem/typescript/2020/jan/jan-08/src/BasicTest.ts"],"names":[],"mappings":";;AAAA;IAAA;IAIA,CAAC;IAHQ,eAAK,GAAZ,UAAa,GAAY;QACvB,OAAO,KAAK,GAAG,GAAG,CAAC;IACrB,CAAC;IACH,gBAAC;AAAD,CAAC,AAJD,IAIC","sourcesContent":["export default class BasicTest {\n  static Hello(str : string): string {\n    return \"Hi \" + str;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c4d86061253647f2900ef9076b23d6a44028091b","contentHash":"1c8d5b697b01790c5e3a5cc3f3559e8a8459bee784e4680c76ac3344eaf1935b"},"/mnt/c/Users/Lin01/source/repos/daily-coding-problem/typescript/2020/jan/jan-08/src/SymbolMatcher.ts":{"path":"/mnt/c/Users/Lin01/source/repos/daily-coding-problem/typescript/2020/jan/jan-08/src/SymbolMatcher.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":22},"end":{"line":6,"column":63}},"4":{"start":{"line":7,"column":0},"end":{"line":29,"column":2}},"5":{"start":{"line":10,"column":16},"end":{"line":10,"column":45}},"6":{"start":{"line":11,"column":4},"end":{"line":27,"column":5}},"7":{"start":{"line":11,"column":17},"end":{"line":11,"column":18}},"8":{"start":{"line":12,"column":8},"end":{"line":26,"column":9}},"9":{"start":{"line":14,"column":16},"end":{"line":14,"column":35}},"10":{"start":{"line":15,"column":16},"end":{"line":15,"column":22}},"11":{"start":{"line":17,"column":16},"end":{"line":22,"column":17}},"12":{"start":{"line":18,"column":20},"end":{"line":18,"column":39}},"13":{"start":{"line":21,"column":20},"end":{"line":21,"column":32}},"14":{"start":{"line":23,"column":16},"end":{"line":23,"column":22}},"15":{"start":{"line":25,"column":16},"end":{"line":25,"column":48}},"16":{"start":{"line":28,"column":4},"end":{"line":28,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":7,"column":28},"end":{"line":7,"column":29}},"loc":{"start":{"line":7,"column":43},"end":{"line":29,"column":1}},"line":7}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":12,"column":8},"end":{"line":26,"column":9}},"type":"switch","locations":[{"start":{"line":13,"column":12},"end":{"line":15,"column":22}},{"start":{"line":16,"column":12},"end":{"line":23,"column":22}},{"start":{"line":24,"column":12},"end":{"line":25,"column":48}}],"line":12},"4":{"loc":{"start":{"line":17,"column":16},"end":{"line":22,"column":17}},"type":"if","locations":[{"start":{"line":17,"column":16},"end":{"line":22,"column":17}},{"start":{"line":17,"column":16},"end":{"line":22,"column":17}}],"line":17}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":4,"6":4,"7":4,"8":20,"9":9,"10":9,"11":10,"12":2,"13":8,"14":10,"15":1,"16":3},"f":{"0":1,"1":4},"b":{"0":[1,1,1],"1":[1,0],"2":[1,1],"3":[9,10,1],"4":[2,8]},"inputSourceMap":{"version":3,"file":"/mnt/c/Users/Lin01/source/repos/daily-coding-problem/typescript/2020/jan/jan-08/src/SymbolMatcher.ts","sources":["/mnt/c/Users/Lin01/source/repos/daily-coding-problem/typescript/2020/jan/jan-08/src/SymbolMatcher.ts"],"names":[],"mappings":";;;;;AAAA,gEAAkC;AAErB,QAAA,iBAAiB,GAAG,UAAC,GAAW;IAC3C,mEAAmE;IACnE,sEAAsE;IAEtE,IAAI,KAAK,GAAG,IAAI,uBAAK,EAAU,CAAC;IAChC,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC3C,QAAQ,GAAG,CAAC,CAAC,CAAC,EAAE;YACd,KAAK,GAAG;gBACN,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnB,MAAM;YACR,KAAK,GAAG;gBACN,IAAI,KAAK,CAAC,OAAO,EAAE,EAAE;oBACnB,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;iBACpB;qBAAM;oBACL,KAAK,CAAC,GAAG,EAAE,CAAC;iBACb;gBACD,MAAM;YACR;gBACE,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;SACnC;KACF;IACD,OAAO,KAAK,CAAC,KAAK,EAAE,CAAC;AACvB,CAAC,CAAC","sourcesContent":["import Stack from \"ts-data.stack\";\n\nexport const numParensToRemove = (str: string): number => {\n  // * Use a stack to push on open parens and pop off on close parens\n  // * at the end the number of symbols left in stack should be returned\n\n  let stack = new Stack<string>();\n  for (let i: number = 0; i < str.length; i++) {\n    switch (str[i]) {\n      case \"(\":\n        stack.push(str[i]);\n        break;\n      case \")\":\n        if (stack.isEmpty()) {\n          stack.push(str[i]);\n        } else {\n          stack.pop();\n        }\n        break;\n      default:\n        throw new Error(\"Not a paren!\");\n    }\n  }\n  return stack.count();\n};\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"0ae9cc42457e1a7904dab02275e9ce84ffc23ed0","contentHash":"92fe7d04c0c056c8f4ff5b54228c48cb8c7a3a29ee63ee95855d1ea8e2309c66"}}