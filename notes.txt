Cool things I have found from conference.

WSL 2 is great and gives you an entire Linux dev env and file system on a windows machine
I can run VS Code in WSL with extensions installed in WSL

CodeSpaces might be really helpful with getting others involved in projects by avoiding
the boilder plate and dependency setup of big systems like Radis where you can spin up a remote
VS code instance in the browser with everything ready to build debug and run the app in the browswer.
This could also be great for remote consultants and just making contributing to software projects more streamlined.

Scott Guthrie talk (cloud)

Azure Kubernetes Serverless could be useful for us and Cosmos DB now has a free tier which could be great to try out.

GitHub actions is really easy to setup with certain platforms (I've tested it with a sideproject) and you can configure
per branch jobs to run concurrently in a secure container in the cloud where you can pull in necessary dependencies like npm, nuget, .net, nodejs etc
and then do things like build, test, audit, archive, deploy and more every single time you push to master or create a PR.

Azure synapse link is designed to avoid entire ETL layer of converting database into analytical data
Azure cosmos DB is the main way synapse link can be leveraged allows us to react immediately to data.

Microsoft is doubling and trippling down on Teams and really wants to push developer effort to build teams apps
it is certainly something worth investing effort in seeking out how we can do more with teams apps.

Fluid framework is a special data structure library that makes things instantly reactive and realtime.

Dapr is a technology that acts as a distributed systems utility to abstract away a lot of the pub/sub, queueing, infratructure etc.
Dapr hooks in as an extra layer to handle a lot of the plumbing of distributed systems.

.NET 5 will ship with new C# 9.0 whictements (script-like) noh allows top-level sta class, namespace main method needed to run.

C# 9.0 allows creating immutable objects without losing out on object initializers.

Ex: 

class Person {
  first { get; init; }
  last { get; init; }
}

var person = new Person {
  first = "Liam",
  last = "Neville"
}

New feature to allow non-destructive mutation by defining:

data class Person {
  first { get; init; }
  last { get; init; }
}

then we can do things like this
var otherPerson = person with { last = "new last name" }

You can only do with expressions with data classes which makes them records and will be reconstructed rather than modified.
This allows for true value equality between data objects so we can do Equals and ReferenceEquals independently like == and === in JS.

